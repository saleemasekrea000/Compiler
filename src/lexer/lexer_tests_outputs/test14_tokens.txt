TYPE type
IDENTIFIER point
PUNCTUATOR :
RECORD record
RELPAR {
VAR var
IDENTIFIER x
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
VAR var
IDENTIFIER y
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
RERLPR }
END end
TYPE type
IDENTIFIER sqaure
PUNCTUATOR :
RECORD record
RELPAR {
VAR var
IDENTIFIER point1
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
VAR var
IDENTIFIER point2
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
VAR var
IDENTIFIER point3
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
VAR var
IDENTIFIER point4
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
RERLPR }
END end
ROUTINE routine
IDENTIFIER square_root
LPAR (
IDENTIFIER number
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER guess
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 1.0
PUNCTUATOR ;
VAR var
IDENTIFIER epsilon
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 0.00001
PUNCTUATOR ;
VAR var
IDENTIFIER diff
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
WHILE while
TRUE true
LOOP loop
VAR var
IDENTIFIER quotient
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
IDENTIFIER number
OPERATOR /
IDENTIFIER guess
PUNCTUATOR ;
VAR var
IDENTIFIER new_guess
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
LPAR (
IDENTIFIER guess
OPERATOR +
IDENTIFIER quotient
RPAR )
OPERATOR /
REAL_LITERAL 2.0
PUNCTUATOR ;
IDENTIFIER diff
PUNCTUATOR :
OPERATOR =
IDENTIFIER new_guess
OPERATOR -
IDENTIFIER guess
PUNCTUATOR ;
IF if
IDENTIFIER diff
OPERATOR <
IDENTIFIER epsilon
AND and
IDENTIFIER diff
OPERATOR >
OPERATOR -
IDENTIFIER epsilon
THEN then
RETURN return
IDENTIFIER new_guess
PUNCTUATOR ;
END end
IDENTIFIER guess
PUNCTUATOR :
OPERATOR =
IDENTIFIER new_guess
PUNCTUATOR ;
END end
END end
ROUTINE routine
IDENTIFIER distance
LPAR (
IDENTIFIER point1
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ,
IDENTIFIER point2
PUNCTUATOR :
IDENTIFIER point
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER ans
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 0.0
PUNCTUATOR ;
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER x
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER x
RPAR )
OPERATOR *
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER x
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER x
RPAR )
OPERATOR +
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER y
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER y
RPAR )
OPERATOR *
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER y
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER y
RPAR )
PUNCTUATOR ;
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
IDENTIFIER square_root
LPAR (
IDENTIFIER ans
RPAR )
PUNCTUATOR ;
RETURN return
IDENTIFIER ans
PUNCTUATOR ;
END end
ROUTINE routine
IDENTIFIER area_of_square
LPAR (
IDENTIFIER sq
PUNCTUATOR :
IDENTIFIER sqaure
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER side_length
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
VAR var
IDENTIFIER area
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
IDENTIFIER side_length
PUNCTUATOR :
OPERATOR =
IDENTIFIER distance
LPAR (
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point1
PUNCTUATOR ,
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point2
RPAR )
PUNCTUATOR ;
IDENTIFIER area
PUNCTUATOR :
OPERATOR =
IDENTIFIER side_length
OPERATOR *
IDENTIFIER side_length
PUNCTUATOR ;
RETURN return
IDENTIFIER area
PUNCTUATOR ;
END end
VAR var
IDENTIFIER sq
PUNCTUATOR :
IDENTIFIER sqaure
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER x
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 1
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER y
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 1
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER x
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 1
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER y
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point3
PUNCTUATOR .
IDENTIFIER x
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point3
PUNCTUATOR .
IDENTIFIER y
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point4
PUNCTUATOR .
IDENTIFIER x
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER sq
PUNCTUATOR .
IDENTIFIER point4
PUNCTUATOR .
IDENTIFIER y
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 1
PUNCTUATOR ;
VAR var
IDENTIFIER area
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
IDENTIFIER area_of_square
LPAR (
IDENTIFIER sq
RPAR )
PUNCTUATOR ;
