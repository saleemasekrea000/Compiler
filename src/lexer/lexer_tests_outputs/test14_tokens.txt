KEYWORD type
IDENTIFIER point
PUNCTUATOR :
KEYWORD record
ERROR {
KEYWORD var
IDENTIFIER x
PUNCTUATOR :
KEYWORD integer
PUNCTUATOR ;
KEYWORD var
IDENTIFIER y
PUNCTUATOR :
KEYWORD integer
PUNCTUATOR ;
ERROR }
KEYWORD end
KEYWORD type
IDENTIFIER sqaure
PUNCTUATOR :
KEYWORD record
ERROR {
KEYWORD var
IDENTIFIER point1
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
KEYWORD var
IDENTIFIER point2
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
KEYWORD var
IDENTIFIER point3
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
KEYWORD var
IDENTIFIER point4
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ;
ERROR }
KEYWORD end
KEYWORD routine
IDENTIFIER square_root
LPAR (
IDENTIFIER number
PUNCTUATOR :
KEYWORD integer
RPAR )
PUNCTUATOR :
KEYWORD real
KEYWORD is
KEYWORD var
IDENTIFIER guess
PUNCTUATOR :
KEYWORD real
KEYWORD is
REAL 1.0
PUNCTUATOR ;
KEYWORD var
IDENTIFIER epsilon
PUNCTUATOR :
KEYWORD real
KEYWORD is
REAL 0.00001
PUNCTUATOR ;
KEYWORD var
IDENTIFIER diff
PUNCTUATOR :
KEYWORD real
PUNCTUATOR ;
KEYWORD while
BOOL true
KEYWORD loop
KEYWORD var
IDENTIFIER quotient
PUNCTUATOR :
KEYWORD real
KEYWORD is
IDENTIFIER number
OPERATOR /
IDENTIFIER guess
PUNCTUATOR ;
KEYWORD var
IDENTIFIER new_guess
PUNCTUATOR :
KEYWORD real
KEYWORD is
LPAR (
IDENTIFIER guess
OPERATOR +
IDENTIFIER quotient
RPAR )
OPERATOR /
REAL 2.0
PUNCTUATOR ;
IDENTIFIER diff
PUNCTUATOR :
OPERATOR =
IDENTIFIER new_guess
OPERATOR -
IDENTIFIER guess
PUNCTUATOR ;
KEYWORD if
IDENTIFIER diff
OPERATOR <
IDENTIFIER epsilon
KEYWORD and
IDENTIFIER diff
OPERATOR >
ERROR -epsilon
KEYWORD then
KEYWORD return
IDENTIFIER new_guess
PUNCTUATOR ;
KEYWORD end
IDENTIFIER guess
PUNCTUATOR :
OPERATOR =
IDENTIFIER new_guess
PUNCTUATOR ;
KEYWORD end
KEYWORD end
KEYWORD routine
IDENTIFIER distance
LPAR (
IDENTIFIER point1
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ,
IDENTIFIER point2
PUNCTUATOR :
IDENTIFIER point
RPAR )
PUNCTUATOR :
KEYWORD real
KEYWORD is
KEYWORD var
IDENTIFIER ans
PUNCTUATOR :
KEYWORD real
KEYWORD is
REAL 0.0
PUNCTUATOR ;
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
LPAR (
ERROR point1.x
OPERATOR -
ERROR point2.x
RPAR )
OPERATOR *
LPAR (
ERROR point1.x
OPERATOR -
ERROR point2.x
RPAR )
OPERATOR +
LPAR (
ERROR point1.y
OPERATOR -
ERROR point2.y
RPAR )
OPERATOR *
LPAR (
ERROR point1.y
OPERATOR -
ERROR point2.y
RPAR )
PUNCTUATOR ;
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
IDENTIFIER square_root
LPAR (
IDENTIFIER ans
RPAR )
PUNCTUATOR ;
KEYWORD return
IDENTIFIER ans
PUNCTUATOR ;
KEYWORD end
KEYWORD routine
IDENTIFIER area_of_square
LPAR (
IDENTIFIER sq
PUNCTUATOR :
IDENTIFIER sqaure
RPAR )
PUNCTUATOR :
KEYWORD real
KEYWORD is
KEYWORD var
IDENTIFIER side_length
PUNCTUATOR :
KEYWORD real
PUNCTUATOR ;
KEYWORD var
IDENTIFIER area
PUNCTUATOR :
KEYWORD real
PUNCTUATOR ;
IDENTIFIER side_length
PUNCTUATOR :
OPERATOR =
IDENTIFIER distance
LPAR (
ERROR sq.point1
PUNCTUATOR ,
ERROR sq.point2
RPAR )
PUNCTUATOR ;
IDENTIFIER area
PUNCTUATOR :
OPERATOR =
IDENTIFIER side_length
OPERATOR *
IDENTIFIER side_length
PUNCTUATOR ;
KEYWORD return
IDENTIFIER area
PUNCTUATOR ;
KEYWORD end
KEYWORD var
IDENTIFIER sq
PUNCTUATOR :
IDENTIFIER sqaure
PUNCTUATOR ;
ERROR sq.point1.x
PUNCTUATOR :
OPERATOR =
INT 1
PUNCTUATOR ;
ERROR sq.point1.y
PUNCTUATOR :
OPERATOR =
INT 1
PUNCTUATOR ;
ERROR sq.point2.x
PUNCTUATOR :
OPERATOR =
INT 1
PUNCTUATOR ;
ERROR sq.point2.y
PUNCTUATOR :
OPERATOR =
INT 4
PUNCTUATOR ;
ERROR sq.point3.x
PUNCTUATOR :
OPERATOR =
INT 4
PUNCTUATOR ;
ERROR sq.point3.y
PUNCTUATOR :
OPERATOR =
INT 4
PUNCTUATOR ;
ERROR sq.point4.x
PUNCTUATOR :
OPERATOR =
INT 4
PUNCTUATOR ;
ERROR sq.point4.y
PUNCTUATOR :
OPERATOR =
INT 1
PUNCTUATOR ;
KEYWORD var
IDENTIFIER area
PUNCTUATOR :
KEYWORD real
KEYWORD is
IDENTIFIER area_of_square
LPAR (
IDENTIFIER sq
RPAR )
PUNCTUATOR ;

