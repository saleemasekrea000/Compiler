TYPE type
IDENTIFIER point
PUNCTUATOR :
RECORD record
RELPAR {
VAR var
IDENTIFIER x
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
VAR var
IDENTIFIER y
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
RERLPR }
END end
TYPE type
IDENTIFIER arrayOfPoint
IS is
ARRAY array
LBRAC [
INTEGER_LITERAL 100
RBRAC ]
IDENTIFIER point
PUNCTUATOR ;
ROUTINE routine
IDENTIFIER square_root
LPAR (
IDENTIFIER number
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER guess
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 1.0
PUNCTUATOR ;
VAR var
IDENTIFIER epsilon
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 0.00001
PUNCTUATOR ;
VAR var
IDENTIFIER diff
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
WHILE while
BOOLEAN_LITERAL true
LOOP loop
VAR var
IDENTIFIER quotient
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
IDENTIFIER number
OPERATOR /
IDENTIFIER guess
PUNCTUATOR ;
VAR var
IDENTIFIER new_guess
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
LPAR (
IDENTIFIER guess
OPERATOR +
IDENTIFIER quotient
RPAR )
OPERATOR /
REAL_LITERAL 2.0
PUNCTUATOR ;
IDENTIFIER diff
OPERATOR :=
IDENTIFIER new_guess
OPERATOR -
IDENTIFIER guess
PUNCTUATOR ;
IF if
IDENTIFIER diff
OPERATOR <
IDENTIFIER epsilon
AND and
IDENTIFIER diff
OPERATOR >
OPERATOR -
IDENTIFIER epsilon
THEN then
RETURN return
IDENTIFIER new_guess
PUNCTUATOR ;
END end
IDENTIFIER guess
OPERATOR :=
IDENTIFIER new_guess
PUNCTUATOR ;
END end
END end
ROUTINE routine
IDENTIFIER distance
LPAR (
IDENTIFIER point1
PUNCTUATOR :
IDENTIFIER point
PUNCTUATOR ,
IDENTIFIER point2
PUNCTUATOR :
IDENTIFIER point
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER ans
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 0.0
PUNCTUATOR ;
IDENTIFIER ans
OPERATOR :=
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER x
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER x
RPAR )
OPERATOR *
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER x
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER x
RPAR )
OPERATOR +
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER y
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER y
RPAR )
OPERATOR *
LPAR (
IDENTIFIER point1
PUNCTUATOR .
IDENTIFIER y
OPERATOR -
IDENTIFIER point2
PUNCTUATOR .
IDENTIFIER y
RPAR )
PUNCTUATOR ;
IDENTIFIER ans
OPERATOR :=
IDENTIFIER square_root
LPAR (
IDENTIFIER ans
RPAR )
PUNCTUATOR ;
RETURN return
IDENTIFIER ans
PUNCTUATOR ;
END end
ROUTINE routine
IDENTIFIER max_distance
LPAR (
IDENTIFIER points
PUNCTUATOR :
IDENTIFIER arrayOfPoint
PUNCTUATOR ,
IDENTIFIER numberOfPoints
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
RPAR )
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
VAR var
IDENTIFIER maxDist
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
IS is
REAL_LITERAL 0.0
PUNCTUATOR ;
VAR var
IDENTIFIER i
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
VAR var
IDENTIFIER j
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
VAR var
IDENTIFIER dist
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
FOR for
IDENTIFIER i
IN in
INTEGER_LITERAL 1
RANGE ..
IDENTIFIER numberOfPoints
LOOP loop
FOR for
IDENTIFIER j
IN in
IDENTIFIER i
OPERATOR +
INTEGER_LITERAL 1
RANGE ..
IDENTIFIER numberOfPoints
LOOP loop
IDENTIFIER dist
OPERATOR :=
IDENTIFIER distance
LPAR (
IDENTIFIER points
LBRAC [
IDENTIFIER i
RBRAC ]
PUNCTUATOR ,
IDENTIFIER points
LBRAC [
IDENTIFIER j
RBRAC ]
RPAR )
PUNCTUATOR ;
IF if
IDENTIFIER dist
OPERATOR >
IDENTIFIER maxDist
THEN then
IDENTIFIER maxDist
OPERATOR :=
IDENTIFIER dist
PUNCTUATOR ;
END end
END end
END end
RETURN return
IDENTIFIER maxDist
PUNCTUATOR ;
END end
VAR var
IDENTIFIER points
PUNCTUATOR :
IDENTIFIER arrayOfPoint
PUNCTUATOR ;
VAR var
IDENTIFIER numPoints
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
VAR var
IDENTIFIER maxDist
PUNCTUATOR :
REAL_LITERAL_KEYWORD real
PUNCTUATOR ;
IDENTIFIER points
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
OPERATOR :=
LPAR (
IDENTIFIER x
OPERATOR :=
INTEGER_LITERAL 1
PUNCTUATOR ,
IDENTIFIER y
OPERATOR :=
INTEGER_LITERAL 1
RPAR )
PUNCTUATOR ;
IDENTIFIER points
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
OPERATOR :=
LPAR (
IDENTIFIER x
OPERATOR :=
INTEGER_LITERAL 4
PUNCTUATOR ,
IDENTIFIER y
OPERATOR :=
INTEGER_LITERAL 5
RPAR )
PUNCTUATOR ;
IDENTIFIER points
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
OPERATOR :=
LPAR (
IDENTIFIER x
OPERATOR :=
INTEGER_LITERAL 7
PUNCTUATOR ,
IDENTIFIER y
OPERATOR :=
INTEGER_LITERAL 1
RPAR )
PUNCTUATOR ;
IDENTIFIER points
LBRAC [
INTEGER_LITERAL 4
RBRAC ]
OPERATOR :=
LPAR (
IDENTIFIER x
OPERATOR :=
INTEGER_LITERAL 1
PUNCTUATOR ,
IDENTIFIER y
OPERATOR :=
INTEGER_LITERAL 8
RPAR )
PUNCTUATOR ;
IDENTIFIER numPoints
OPERATOR :=
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER maxDist
OPERATOR :=
IDENTIFIER max_distance
LPAR (
IDENTIFIER points
PUNCTUATOR ,
IDENTIFIER numPoints
RPAR )
PUNCTUATOR ;
