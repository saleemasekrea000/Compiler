TYPE type
IDENTIFIER arrayOfInteger
IS is
ARRAY array
LBRAC [
INTEGER_LITERAL 100
RBRAC ]
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
TYPE type
IDENTIFIER two_dimensional_array
IS is
ARRAY array
LBRAC [
INTEGER_LITERAL 100
RBRAC ]
IDENTIFIER arrayOfInteger
PUNCTUATOR ;
ROUTINE routine
IDENTIFIER max_of_array
LPAR (
IDENTIFIER lengthOfArray
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ,
IDENTIFIER arr
PUNCTUATOR :
IDENTIFIER arrayOfInteger
RPAR )
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
IS is
VAR var
IDENTIFIER ans
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
IS is
OPERATOR -
INTEGER_LITERAL 1000000000
PUNCTUATOR ;
FOR for
IDENTIFIER i
IN in
INTEGER_LITERAL 1
RANGE ..
IDENTIFIER lengthOfArray
LOOP loop
IF if
IDENTIFIER arr
LBRAC [
IDENTIFIER i
RBRAC ]
OPERATOR >
IDENTIFIER ans
THEN then
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
IDENTIFIER arr
LBRAC [
IDENTIFIER i
RBRAC ]
PUNCTUATOR ;
END end
END end
RETURN return
IDENTIFIER ans
PUNCTUATOR ;
END end
ROUTINE routine
IDENTIFIER sum
LPAR (
IDENTIFIER numberOfArrays
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ,
IDENTIFIER lengthOfArray
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ,
IDENTIFIER arr
PUNCTUATOR :
IDENTIFIER two_dimensional_array
RPAR )
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
IS is
VAR var
IDENTIFIER ans
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
IS is
INTEGER_LITERAL 0
PUNCTUATOR ;
FOR for
IDENTIFIER i
IN in
INTEGER_LITERAL 1
RANGE ..
IDENTIFIER numberOfArrays
LOOP loop
IDENTIFIER ans
PUNCTUATOR :
OPERATOR =
IDENTIFIER ans
OPERATOR +
IDENTIFIER max_of_array
LPAR (
IDENTIFIER lengthOfArray
PUNCTUATOR ,
IDENTIFIER arr
LBRAC [
IDENTIFIER i
RBRAC ]
RPAR )
PUNCTUATOR ;
END end
RETURN return
IDENTIFIER ans
PUNCTUATOR ;
END end
VAR var
IDENTIFIER arr
PUNCTUATOR :
IDENTIFIER two_dimensional_array
PUNCTUATOR ;
VAR var
IDENTIFIER result
PUNCTUATOR :
INTEGER_LITERAL_KEYWORD integer
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 3
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 7
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 2
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 5
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 1
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 9
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
LBRAC [
INTEGER_LITERAL 1
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 8
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
LBRAC [
INTEGER_LITERAL 2
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 4
PUNCTUATOR ;
IDENTIFIER arr
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
LBRAC [
INTEGER_LITERAL 3
RBRAC ]
PUNCTUATOR :
OPERATOR =
INTEGER_LITERAL 6
PUNCTUATOR ;
IDENTIFIER result
PUNCTUATOR :
OPERATOR =
IDENTIFIER sum
LPAR (
INTEGER_LITERAL 3
PUNCTUATOR ,
INTEGER_LITERAL 3
PUNCTUATOR ,
IDENTIFIER arr
RPAR )
PUNCTUATOR ;
